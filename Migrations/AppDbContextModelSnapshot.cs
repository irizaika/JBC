// <auto-generated />
using System;
using JBC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JBC.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("JBC.Models.Contractor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("BankAccount")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DayRate")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("RoleId");

                    b.HasIndex("Status");

                    b.ToTable("Contractors");
                });

            modelBuilder.Entity("JBC.Models.ContractorsRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContractorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Pay")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("JobTypeId");

                    b.ToTable("ContractorRates");
                });

            modelBuilder.Entity("JBC.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Count")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Details")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("JobTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PayReceived")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("PartnerId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("JBC.Models.JobCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Hours")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCustom")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("JobCategories");
                });

            modelBuilder.Entity("JBC.Models.JobContractor", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContractorId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Pay")
                        .HasColumnType("REAL");

                    b.HasKey("JobId", "ContractorId");

                    b.HasIndex("ContractorId");

                    b.ToTable("JobContractors");
                });

            modelBuilder.Entity("JBC.Models.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("JobCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfVans")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PayRate")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("JobCategoryId");

                    b.HasIndex("Name");

                    b.HasIndex("PartnerId");

                    b.ToTable("JobTypes");
                });

            modelBuilder.Entity("JBC.Models.JobVan", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VanId")
                        .HasColumnType("INTEGER");

                    b.HasKey("JobId", "VanId");

                    b.HasIndex("VanId");

                    b.ToTable("JobVans");
                });

            modelBuilder.Entity("JBC.Models.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone1")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone2")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName");

                    b.HasIndex("Status");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("JBC.Models.PartnersRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartnerId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Pay")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("PartnerId");

                    b.ToTable("PartnersRates");
                });

            modelBuilder.Entity("JBC.Models.PersonPayRatePerJobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContractorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Pay")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("JobTypeId");

                    b.ToTable("ContractorRatesPErJobType");
                });

            modelBuilder.Entity("JBC.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleName");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("JBC.Models.RolePayRatePerJobCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Pay")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("JobCategoryId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleRatesPerJobCategory");
                });

            modelBuilder.Entity("JBC.Models.Van", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Details")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Plate")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("VanName");

                    b.ToTable("Vans");
                });

            modelBuilder.Entity("JBC.Models.Contractor", b =>
                {
                    b.HasOne("JBC.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("JBC.Models.ContractorsRate", b =>
                {
                    b.HasOne("JBC.Models.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JBC.Models.JobType", "JobType")
                        .WithMany()
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("JobType");
                });

            modelBuilder.Entity("JBC.Models.Job", b =>
                {
                    b.HasOne("JBC.Models.JobType", "JobType")
                        .WithMany()
                        .HasForeignKey("JobTypeId");

                    b.HasOne("JBC.Models.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.Navigation("JobType");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("JBC.Models.JobContractor", b =>
                {
                    b.HasOne("JBC.Models.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JBC.Models.Job", "Job")
                        .WithMany("JobContractors")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("JBC.Models.JobType", b =>
                {
                    b.HasOne("JBC.Models.JobCategory", "JobCategory")
                        .WithMany()
                        .HasForeignKey("JobCategoryId");

                    b.HasOne("JBC.Models.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.Navigation("JobCategory");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("JBC.Models.JobVan", b =>
                {
                    b.HasOne("JBC.Models.Job", "Job")
                        .WithMany("JobVans")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JBC.Models.Van", "Van")
                        .WithMany()
                        .HasForeignKey("VanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Van");
                });

            modelBuilder.Entity("JBC.Models.PersonPayRatePerJobType", b =>
                {
                    b.HasOne("JBC.Models.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JBC.Models.JobType", "JobType")
                        .WithMany()
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("JobType");
                });

            modelBuilder.Entity("JBC.Models.RolePayRatePerJobCategory", b =>
                {
                    b.HasOne("JBC.Models.JobCategory", "JobCategory")
                        .WithMany()
                        .HasForeignKey("JobCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JBC.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobCategory");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("JBC.Models.Job", b =>
                {
                    b.Navigation("JobContractors");

                    b.Navigation("JobVans");
                });
#pragma warning restore 612, 618
        }
    }
}
